{
  "version": 3,
  "sources": ["../src/extension.ts", "../src/parser.ts", "../src/panels/MainPanel.ts", "../src/utilities/getUri.ts", "../src/utilities/getNonce.ts", "../src/boardsInfo.ts", "../src/cmaker.ts", "../src/importproj.ts"],
  "sourcesContent": ["// The module 'vscode' contains the VS Code extensibility API\r\n// Import the module and reference it with the alias vscode in your code below\r\nimport * as vscode from 'vscode';\r\nimport * as path from 'path';\r\nimport * as readline from 'readline';\r\nimport * as fs from 'fs';\r\nimport * as parser from './parser';\r\nimport { MainPanel } from \"./panels/MainPanel\";\r\nimport { Board } from './boardsInfo';\r\nimport Cmaker from './cmaker';\r\n\r\n/**\r\n * Gets the compiler flags out of the platform.txt file\r\n */\r\nasync function getCompileFlags() {\r\n    // get platform.txt file to parse\r\n    const filePath = await vscode.window.showInputBox({\r\n        placeHolder: \"Compiler Flags\",\r\n        prompt: \"Enter path to 'platform.txt' file\",\r\n    });\r\n    if (filePath){\r\n        // make sure file is valid\r\n        var flagArr = await parsePlatform(filePath);\r\n        var flagStr = \"\";\r\n        for (var i = 0; i < flagArr.length; i++) {flagStr += flagArr[i] + ',\\n';}\r\n        vscode.window.showInformationMessage(flagStr, {modal: true});\r\n    } else {\r\n        vscode.window.showInformationMessage(\"Not a valid path or directory does not contain platform.txt file.\");\r\n    }\r\n}\r\n/**\r\n * Parses the platform.txt file and pulls out all the compiler flags\r\n * @param filePath - directory to platform.txt file\r\n * @returns Array of all the compiler flags\r\n */\r\nasync function parsePlatform(filePath:string) {\r\n    var flagArr: string[] = [];\r\n    try {\r\n        ////// separate text file into readable lines\r\n        const lines: string[] = [];\r\n        const fileStream = fs.createReadStream(path.join(filePath, 'platform.txt'));\r\n        const rl = readline.createInterface({\r\n            input: fileStream,\r\n            crlfDelay: Infinity,\r\n        });\r\n        for await (const line of rl) {\r\n            lines.push(line);\r\n        }\r\n        ////// get all the compiler flag lines\r\n        for (var i = 0; i < lines.length; i++) {\r\n            var line = lines[i].substring(0, lines[i].indexOf('='));\r\n            if (line.includes(\"compiler.\") && line.includes(\".flags\")) {\r\n                flagArr.push(lines[i]);\r\n            }\r\n        }\r\n    } catch (error) {\r\n        flagArr = [\"Error occurred while reading the file.\"];\r\n    }\r\n    return flagArr;\r\n}\r\n\r\nimport * as importproj from './importproj';\r\n\r\n\r\n/**\r\n     * Returns an iterable object containing the absolute name of all files in a given directory,\r\n\t * including files in subfolders. \r\n     * @param directoryPath - the absolute path to the directory\r\n\t * @returns Iterable object with the absolute name of all files in a directory\r\n     */\r\nfunction* getAllFilePaths(directoryPath: string): Iterable<string> {\r\n    const files = fs.readdirSync(directoryPath);\r\n\r\n    for (const file of files) {\r\n        const filePath = path.join(directoryPath, file);\r\n        const stats = fs.statSync(filePath);\r\n\r\n        if (stats.isFile()) {\r\n            yield filePath; \r\n        } else if (stats.isDirectory()) {\r\n            yield* getAllFilePaths(filePath);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * This function scans a file's include statements to retrive\r\n * the name of all the required libraries. \r\n * \r\n * Note that reading a file is an asyncronous process, \r\n * meaning the function that calls it must be asynchronous.\r\n * \r\n * @param filepath : .ino or .c sketch document\r\n * @returns Promise String\r\n */\r\nfunction getAllLibraries(filepath: string): Promise<string[]> {\r\n    return new Promise<string[]>((resolve, reject) => {\r\n        let libraries: string[] = [];\r\n\r\n        const fileStream = fs.createReadStream(filepath);\r\n\r\n        const rl = readline.createInterface({\r\n            input: fileStream,\r\n            crlfDelay: Infinity,\r\n        });\r\n\r\n        //regex for #include <X.h>\r\n        const regex = /#include <([^>]+\\.h)>/g;\r\n\r\n        //iterating line-by-line through filestream\r\n        rl.on('line', (line) => {\r\n            const matches = line.match(regex);\r\n\r\n            if(matches) {\r\n                libraries.push(line.substring(10, line.length - 3));\r\n            }\r\n            else if(line.includes(\"void setup()\")) {\r\n                rl.close();\r\n            }\r\n            \r\n        });\r\n\r\n        //retrieve promised array of strings\r\n        rl.on('close', () => {\r\n            resolve(libraries);\r\n        });\r\n\r\n        rl.on('error', (err) => {\r\n            reject(err);\r\n        });\r\n\r\n    });\r\n}\r\n\r\n /* Copies a file into a given directory location.\r\n * @param sourcePath Path to the file to be copied\r\n * @param destinationDirectory Path to the directory the file should be copied into\r\n * @param newFileName Optional. Rename the copy of the file. Can be used to rename .ino to .cpp, but doesn't change the \r\n * contents of the file. \r\n */\r\nfunction copyFile(sourcePath: string, destinationDirectory: string, newFileName?: string) {\r\n\tvar fileName;\r\n\tif (newFileName) {\r\n\t\tfileName = newFileName;\r\n\t} else {\r\n\t\tfileName = path.basename(sourcePath);\r\n\t}\r\n\tconst destinationPath = path.join(destinationDirectory, fileName);\r\n\tconst input = fs.createReadStream(sourcePath);\r\n\tconst output = fs.createWriteStream(destinationPath);\r\n\t//verify read & write streams\r\n\tinput.on('error', (err) => {\r\n\t\tconsole.error('Error reading file: ', sourcePath);\r\n\t});\r\n\toutput.on('error', (err) => {\r\n\t\tconsole.error('Error writing to file: ', destinationPath);\r\n\t});\r\n\t//copy file\r\n\tinput.pipe(output);\r\n}\r\n\r\n/**\r\n * This function scans the the Arduino/libraries folder for any source files that\r\n * are imported within the main sketch file.\r\n * \r\n * Note that this function assumes that the directory it is copying files\r\n * to already exists.\r\n * \r\n * @param newDirectory : Directory to copy files to\r\n * @param sketchFile : .ino file with \"#includes <lib.h>\"\r\n */\r\nasync function copyLibraries(newDirectory: string, sketchFile: string) {\r\n    //getting file paths\r\n    const localAppData = process.env.LOCALAPPDATA;\r\n    const libraryFilePath = path.join(localAppData!, \"Arduino15\", \"libraries\");\r\n    let libraries = undefined;\r\n    try {\r\n        libraries = await getAllLibraries(sketchFile);\r\n    } catch (error) {\r\n        console.error(error);\r\n        return;\r\n    }\r\n\r\n    const iterable = getAllFilePaths(libraryFilePath);\r\n    \r\n    //copying files to new directory if their directory name matches .ino file\r\n    for await(const scanned of iterable) {\r\n        let directories = scanned.split('\\\\');\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        let file_type = directories[directories.length - 1].split('.');\r\n        if(file_type.length >= 1 && libraries.includes(directories[7])) {\r\n            if(file_type[1] === 'cpp' || (file_type[1] === 'c' || (file_type[1] === 'h' || (file_type[1] === 'hpp')))) {\r\n                // creates new folder for each library\r\n                //fs.mkdirSync(newDirectory+\"\\\\\"+file_type[0]);\r\n                //copyFile(scanned, newDirectory+\"\\\\\"+file_type[0]);\r\n                copyFile(scanned, newDirectory);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nasync function printFlags(board : Board) {\r\n    let str = await parser.getAllFlags(board);\r\n\r\n    console.log(str);\r\n}\r\n\r\n\r\n// This method is called when your extension is activated\r\n// Your extension is activated the very first time the command is executed\r\nexport function activate(context: vscode.ExtensionContext) {\r\n\t\r\n    const arduinoImportCommand = vscode.commands.registerCommand(\"arduino-mod.arduinoImport\", () => {\r\n      MainPanel.render(context.extensionUri);\r\n    });\r\n    context.subscriptions.push(arduinoImportCommand);\r\n}\r\n\r\n\r\nexport async function startImport(sketchPath: string, destDir: string, board: Board) {\r\n    vscode.window.showInformationMessage(\"Starting import.\");\r\n    //rename .ino as .cpp and copy it to the destination directory\r\n    const file = path.basename(sketchPath);\r\n    const cFile = file.replace(/\\.ino$/, '.cpp');\r\n    console.log(\"Starting to copy sketch file....\");\r\n    copyFile(sketchPath, destDir, cFile);\r\n\r\n    //create lib folder in destination directory and copy all librarires included in sketch file\r\n    const libPath = path.join(destDir, 'lib');\r\n    if (!fs.existsSync(libPath)) {\r\n        fs.mkdirSync(libPath);\r\n    }\r\n    console.log(\"Starting to copy libraries...\");\r\n    copyLibraries(libPath, sketchPath);\r\n    console.log(\"Library import complete\");\r\n\r\n    //create core folder in destination directory & copy appropriate code device library source files\r\n    const corePath = path.join(destDir, 'core');\r\n    if (!fs.existsSync(corePath)) {\r\n        fs.mkdirSync(corePath);\r\n    }\r\n    console.log(\"Starting to copy code device library files...\");\r\n    importproj.copyDirectory(board.getPathToCore(), corePath);\r\n    console.log(\"Core import complete\");\r\n\r\n    //copy avr-gcc compiler \r\n    importproj.copyAvrGcc(destDir);\r\n    console.log(\"Compiler copy complete\");\r\n\r\n    const cmake= new Cmaker();\r\n    cmake.setProjectDirectory(destDir);\r\n    cmake.setProjectName(file);\r\n    cmake.setSourceName(file);\r\n    cmake.setCompilerFlags(await parser.getAllFlags(board));\r\n\r\n    //TOD - this needs to be fixed to link correct files\r\n    cmake.setLinkerFlags('-Wall -Wextra -Os -g -flto -fuse-linker-plugin -mrelax -Wl,--gc-sections,--section-start=.text=0x0,--section-start=.FLMAP_SECTION1=0x8000,--section-start=.FLMAP_SECTION2=0x10000,--section-start=.FLMAP_SECTION3=0x18000 -mmcu=avr64dd32');\r\n    cmake.build();\r\n\r\n    vscode.window.showInformationMessage(\"Import complete!\");\r\n}\r\n\r\n\r\n\r\n// This method is called when your extension is deactivated\r\nexport function deactivate() {}\r\n", "import * as vscode from 'vscode';\r\nimport * as readline from 'readline';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport { Board } from './boardsInfo';\r\n\r\n/**\r\n * Parses the platform.txt file and pulls out all the compiler flags\r\n * @param filePath - directory to platform.txt file\r\n * @returns Array of all the compiler flags\r\n */\r\nasync function parsePlatform(filePath:string) {\r\n    var flagArr: string[] = [];\r\n    try {\r\n        ////// separate text file into readable lines\r\n        const lines: string[] = [];\r\n        const fileStream = fs.createReadStream(path.join(filePath, 'platform.txt'));\r\n        const rl = readline.createInterface({\r\n            input: fileStream,\r\n            crlfDelay: Infinity,\r\n        });\r\n        for await (const line of rl) {\r\n            lines.push(line);\r\n        }\r\n        ////// get all the compiler flag lines\r\n        for (var i = 0; i < lines.length; i++) {\r\n            var line = lines[i].substring(0, lines[i].indexOf('='));\r\n            if (line.includes(\"compiler.\") || line.includes(\".flags\") || line.includes(\"recipe.\") || line.includes(\"build\")) {\r\n                flagArr.push(lines[i]);\r\n            }\r\n        }\r\n    } catch (error) {\r\n        flagArr = [\"Error occurred while reading the file.\"];\r\n    }\r\n    return flagArr;\r\n}\r\n\r\n/**\r\n * Parses the passed in boards.txt file and creates a map of\r\n * the setting name and associated value(s)\r\n * \r\n * @param filepath to boards.txt\r\n * @returns hashmap of options and values\r\n */\r\nfunction parseBoards(filepath: string, boardName: string): Promise<Map<string, string>>{\r\n    return new Promise((resolve, reject) => {\r\n        const map = new Map();\r\n        const fileStream = fs.createReadStream(filepath);\r\n\r\n        const rl = readline.createInterface({\r\n            input: fileStream,\r\n            crlfDelay: Infinity,\r\n        });\r\n\r\n        const regex = /[^#]*=/;\r\n       \r\n        rl.on('line', (line) => {\r\n        \r\n            const matches = line.match(regex);\r\n\r\n            if(matches) {\r\n                var str = line;\r\n                var mapValues = str.split('=',2);\r\n                \r\n                if(mapValues[0].includes(boardName)) {\r\n                    map.set(mapValues[0],mapValues[1]);\r\n                }\r\n                \r\n            }\r\n            \r\n        });\r\n\r\n        rl.on('close', () => {\r\n            resolve(map);\r\n          });\r\n\r\n    });\r\n}\r\n\r\n/**\r\n * Gets the compiler flags out of the platform.txt file\r\n */\r\nexport async function getCompileFlags() {\r\n    // get platform.txt file to parse\r\n    const filePath = await vscode.window.showInputBox({\r\n        placeHolder: \"Compiler Flags\",\r\n        prompt: \"Enter path to 'platform.txt' file\",\r\n    });\r\n    if (filePath){\r\n        // make sure file is valid\r\n        var flagArr = await parsePlatform(filePath);\r\n        var flagStr = \"\";\r\n        for (var i = 0; i < flagArr.length; i++) {\r\n            flagStr += flagArr[i] + ',\\n';\r\n        }\r\n        vscode.window.showInformationMessage(flagStr, {modal: true});\r\n    } else {\r\n        vscode.window.showInformationMessage(\"Not a valid path or directory does not contain platform.txt file.\");\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Gets all flags for specified platform by matching key-value pairs in board.txt and \r\n * platform.txt\r\n * \r\n * @param version specific version of dxcore installed, e.g. \"1.5.11\"\r\n * @param platform specific platform, e.g. \"avrdd\"\r\n * @returns string of all flags, e.g. \"-Wall -fpermissive\"\r\n */\r\nexport async function getAllFlags(board: Board): Promise<string> {\r\n    try {\r\n        //initalize some variables\r\n        const platform = board.getChipName();\r\n        const hardCodedFlags = board.getHardcodedFlags();\r\n\r\n        //getting map for boards.txt\r\n        const localAppData = process.env.LOCALAPPDATA;\r\n        const version = getDXCoreVersion();\r\n        const libraryFilePath = path.join(localAppData, \"Arduino15\", \"packages\", \"DxCore\",\"hardware\",\"megaavr\",version,\"boards.txt\");\r\n        const map = await parseBoards(libraryFilePath, platform);\r\n\r\n        //getting array of platform.txt\r\n        let platformFolder = path.join(localAppData, \"Arduino15\", \"packages\", \"DxCore\",\"hardware\",\"megaavr\",version);\r\n        let array = await parsePlatform(platformFolder);\r\n\r\n        let cppPatternIndex = 0;\r\n        let recipe = \"recipe.cpp.o.pattern\";\r\n        \r\n\r\n        //finding cpp recipe line\r\n        for(let i =0; i < array.length; i++) {\r\n            if(array[i].includes(recipe)) {\r\n                cppPatternIndex = i;\r\n                // console.log(array[i]);\r\n                break;\r\n            }\r\n        }\r\n        \r\n        //getting all flags and variables from line\r\n        let optionString = array[cppPatternIndex].substring(recipe.length+1,array[cppPatternIndex].length);\r\n        let optionArray = optionString.split(\" \");\r\n\r\n        let variables: string[] = [];   //{variable}, without {}\r\n        let standAloneFlags = [];       //eg. -flag\r\n        let flagAndVariables: string[] = [];      //mmcu={variable}, with {}\r\n\r\n        //iterating through paltform.txt array for variables\r\n        for(let i = 0; i < optionArray.length; i++) {\r\n            let str = optionArray[i];\r\n            \r\n            if(str.includes(\"=\") && str.includes(\"{\")) {\r\n                flagAndVariables.push(optionArray[i]);\r\n            }\r\n            //filtering for relevant simple variables\r\n            if(str.includes(\"{\") && !str.includes(\"source_file\") && !str.includes(\"includes\") && \r\n                !str.includes(\"source_files\") && !str.includes(\"object_file\") && !str.includes(\"core.path\") && !str.includes(\"compiler.path\")) {\r\n                variables.push(optionArray[i].substring(1,optionArray[i].length-1));\r\n            }\r\n        }\r\n\r\n        //reiterating through platform.txt for variables defined in platform.txt\r\n        for(let i = 0; i < array.length; i++) {\r\n            let equalIndex = array[i].indexOf(\"=\");\r\n\r\n            let value = array[i].substring(0,equalIndex);\r\n            let options = array[i].substring(equalIndex+1,array[i].length);\r\n\r\n            let index = variables.indexOf(value);\r\n            if(index !== -1) {\r\n                \r\n                let parsedOptions = options.split(\" \");\r\n                \r\n                for(let x = 0; x < parsedOptions.length; x++) {\r\n                    let opt = parsedOptions[x];\r\n                    \r\n                    //standalone flag\r\n                    if(!opt.includes(\"{\") && opt.includes(\"-\")) {\r\n                        standAloneFlags.push(opt);\r\n                    //new flagAndVariable\r\n                    } else if(opt.indexOf(\"{\") !== 0 && opt !== \"\") {\r\n                        if(!opt.includes(\"runtime.ide\") && !opt.includes(\"versionnum\") && !opt.includes(\"build.arch\")) {\r\n                            const match = opt.match(/{(.*?)}/);\r\n                            flagAndVariables.push(opt);\r\n                        \r\n                            if(match[1] !== null) {\r\n                                variables.push(match[1]);\r\n                            }   \r\n                        }\r\n                    //new variable\r\n                    } else if(opt !== \"\") {\r\n                        //simple variables\r\n                        variables.push(opt.substring(1,opt.length-1));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let indexRemove: string[] = [];\r\n        let additionalVariables: string[] = [];\r\n        let fPlusVariablesToRemove: string[] = [];\r\n        \r\n\r\n    \r\n        //iterating through boards.txt for key-variable pairs\r\n        map.forEach((value, key) => {\r\n            //ignoring irrelevant entries\r\n            if(key.includes(\"avrddopti\") || !key.includes(platform)) {\r\n\r\n            //selecting default value for millistimer\r\n            } else if(key.includes(\"millistimer\")) {\r\n                if(key.includes(\"tcb2\")) {\r\n                    for(let x =0; x < flagAndVariables.length; x++) {\r\n                        if(flagAndVariables[x].includes(\"millistimer\")) {\r\n\r\n                            const match = flagAndVariables[x].match(/{(.*?)}/);\r\n    \r\n                            indexRemove.push(match[1]);\r\n                            fPlusVariablesToRemove.push(flagAndVariables[x]);\r\n                            standAloneFlags.push(getFlag(flagAndVariables[x],value));\r\n                        }\r\n                    }\r\n                } \r\n            }\r\n            //selecting default value for flmapopts\r\n            else if(key.includes(\"build.flmapopts\")) {\r\n                if(key.includes(\"lockdefault\")) {\r\n                    indexRemove.push(\"build.flmapopts\");\r\n                    standAloneFlags.push(value);               \r\n                }    \r\n            //selecting default value ofr attachmode     \r\n            } else if(key.includes(\"build.attachmode\")) {\r\n                if(key.includes(\"allenabled\")) {\r\n                    indexRemove.push(\"build.attachmode\");\r\n                    standAloneFlags.push(value);\r\n                }    \r\n            //selecting default value for wiremode\r\n            } else if(key.includes(\"build.wiremode\")) {\r\n                if(key.includes(\"mors\")) {\r\n                    for(let x =0; x < flagAndVariables.length; x++) {\r\n                        if(flagAndVariables[x].includes(\"wiremode\")) {\r\n\r\n                            const match = flagAndVariables[x].match(/{(.*?)}/);\r\n    \r\n                            indexRemove.push(match[1]);\r\n                            fPlusVariablesToRemove.push(flagAndVariables[x]);\r\n                            standAloneFlags.push(getFlag(flagAndVariables[x],value));\r\n                        }\r\n                    }\r\n                }\r\n            //selecting default mode for clocksource\r\n            } else if(key.includes(\"clocksource\")) {\r\n                if(key.includes(\"24internal\") && key.includes(\"avrdd\")) {\r\n                    for(let x =0; x < flagAndVariables.length; x++) {\r\n                        if(flagAndVariables[x].includes(\"clocksource\")) {\r\n\r\n                            const match = flagAndVariables[x].match(/{(.*?)}/);\r\n    \r\n                            indexRemove.push(match[1]);\r\n                            fPlusVariablesToRemove.push(flagAndVariables[x]);\r\n                            standAloneFlags.push(getFlag(flagAndVariables[x],value));\r\n                        }\r\n                    }\r\n                } \r\n            //selecting default value for build.mcu\r\n            } else if(key.includes(\"build.mcu\")) {\r\n                if(key.includes(\"avr64dd32\")) {\r\n                    for(let x =0; x < flagAndVariables.length; x++) {\r\n                        if(flagAndVariables[x].includes(\"mmcu\")) {\r\n                            const match = flagAndVariables[x].match(/{(.*?)}/);\r\n\r\n\r\n                            indexRemove.push(match[1]);\r\n                            fPlusVariablesToRemove.push(flagAndVariables[x]);\r\n                            standAloneFlags.push(getFlag(flagAndVariables[x],value));\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                //searching for keys that satisfy flagAndVariables\r\n                for(let i = 0; i < flagAndVariables.length; i++) {\r\n                    const match = flagAndVariables[i].match(/{(.*?)}/);\r\n\r\n                    if(key.includes(match[1])) {\r\n                        let str = getFlag(flagAndVariables[i],value);\r\n\r\n                        if(!str.includes(\"{\") && !str.includes(\" \") && !str.includes(\"}\")) {\r\n                            standAloneFlags.push(str);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //searching through for matches to variables\r\n                for(let i = 0; i < variables.length; i++) {\r\n                    if(key.includes(variables[i]) && !key.includes(\"oldversion\")) {\r\n                        //standalone flag(s)\r\n                        if(value.includes(\"-\") && !value.includes(\"{\")) {\r\n                            indexRemove.push(key);\r\n                            standAloneFlags.push(value);\r\n                        //mutliple new variables\r\n                        } else if(value.includes(\"{\") && value.includes(\" \")) {\r\n                            let vars = value.split(\" \");\r\n                            for(let x = 0; x < vars.length; x++) {\r\n                                additionalVariables.push(vars[x].substring(1,vars[x].length-1));\r\n                            }\r\n                        } \r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        for(let i = 0; i < indexRemove.length; i++) {\r\n            let index = variables.indexOf(indexRemove[i]);\r\n            if(index !== -1) {\r\n                variables.splice(index,1);\r\n            } else {\r\n                // console.log(\"Could not remove \" + indexRemove[i]);\r\n            }\r\n        }\r\n\r\n        for(let i =0; i < additionalVariables.length; i++) {\r\n            variables.push(additionalVariables[i]);\r\n        }\r\n\r\n        for(let i = 0; i < fPlusVariablesToRemove.length; i++) {\r\n            let index = flagAndVariables.indexOf(fPlusVariablesToRemove[i]);\r\n            \r\n            if(index !== -1) {\r\n                flagAndVariables.splice(index, 1);\r\n            } else {\r\n                // console.log(\"Couldn't remove \" + flagAndVariables[i]);\r\n            }\r\n        }\r\n\r\n        additionalVariables = [];\r\n        indexRemove = [];\r\n\r\n        //DEBUG\r\n        // console.log(\"\\n\\n\");\r\n        // console.log(variables);\r\n        // console.log(standAloneFlags);\r\n        // console.log(flagAndVariables)\r\n\r\n        let str = \"\";\r\n\r\n        for(let i = 0; i < standAloneFlags.length; i++) {\r\n            str += standAloneFlags[i] + \" \";\r\n        }\r\n\r\n        str += hardCodedFlags;\r\n\r\n        return str;\r\n\r\n    } catch (error) {\r\n        console.error(\"An error occurred:\", error);\r\n    }\r\n\r\n    return \"\";\r\n}\r\n\r\n/**\r\n * Helper function that replaces variable within {} with key-pair value.\r\n * \r\n * @param flagAndVariable e.g. \"mmcu={build.version}\"\r\n * @param value value {} should be replaced with e.g. avr64\r\n * @returns e.g. mmcu=avr64\r\n */\r\nfunction getFlag(flagAndVariable: string, value: string): string {\r\n    let leftBracket = flagAndVariable.indexOf(\"{\");\r\n    let rightBracket = flagAndVariable.indexOf(\"}\");\r\n\r\n    if(leftBracket === -1 || rightBracket === -1) {\r\n        return \"err\";\r\n    }\r\n\r\n    let flag = flagAndVariable.substring(0,leftBracket) + value;\r\n\r\n    if(rightBracket !== (flagAndVariable.length - 1)) {\r\n        flag += flagAndVariable.substring(leftBracket+1,flagAndVariable.length-1);\r\n    }\r\n\r\n    return flag;\r\n}\r\n\r\n/**\r\n * Helper function that returns the version of DxCore installed. May not be fail-proof: uses\r\n * the name of the folder in the DxCore/hardware/megaavr to determine the version.\r\n * \r\n * @returns string with version of DxCore (ex. \"1.5.11\")\r\n */\r\nexport function getDXCoreVersion(): string {\r\n    let result = '';\r\n    const localAppData = process.env.LOCALAPPDATA;\r\n    if (localAppData) {\r\n        const versionFilePath = path.join(localAppData, \"Arduino15\", \"packages\", \"DxCore\",\"hardware\",\"megaavr\");\r\n        const items = fs.readdirSync(versionFilePath);\r\n        const firstItem = items[0];\r\n        //const stats = fs.statSync(`${versionFilePath}/${firstItem}`);\r\n        result = firstItem;\r\n    }\r\n    return result;\r\n}\r\n\r\n\r\n", "import { Disposable, Webview, WebviewPanel, window, Uri, ViewColumn } from \"vscode\";\r\nimport { getUri } from \"../utilities/getUri\";\r\nimport { getNonce } from \"../utilities/getNonce\";\r\nimport * as ex from \"../extension\";\r\nimport * as boardsInfo from \"../boardsInfo\";\r\nimport { Board } from \"../boardsInfo\";\r\n\r\nexport class MainPanel {\r\n  public static currentPanel: MainPanel | undefined;\r\n  private readonly _panel: WebviewPanel;\r\n  private _disposables: Disposable[] = [];\r\n  private extensionUri: Uri;\r\n\r\n  private sketchFile: string = \"\";\r\n  private destinationDirectory: string = \"\";\r\n  private selectedBoard: string = \"\";\r\n  private selectedOption: string = \"\";\r\n\r\n  private board: Board;\r\n  private readyForImport: boolean = false;\r\n\r\n  /**\r\n   * The MainPanel class private constructor (called only from the render method).\r\n   *\r\n   * @param panel A reference to the webview panel\r\n   * @param extensionUri The URI of the directory containing the extension\r\n   */\r\n  private constructor(panel: WebviewPanel, extensionUri: Uri) {\r\n    this._panel = panel;\r\n    this.extensionUri = extensionUri;\r\n\r\n    // Set an event listener to listen for when the panel is disposed (i.e. when the user closes\r\n    // the panel or when the panel is closed programmatically)\r\n    this._panel.onDidDispose(() => this.dispose(), null, this._disposables);\r\n\r\n    // Set the HTML content for the webview panel\r\n    this._panel.webview.html = this._getWebviewContent(this._panel.webview);\r\n\r\n    // Set an event listener to listen for messages passed from the webview context\r\n    this._setWebviewMessageListener(this._panel.webview);\r\n  }\r\n\r\n  /**\r\n   * Renders the current webview panel if it exists otherwise a new webview panel\r\n   * will be created and displayed.\r\n   *\r\n   * @param extensionUri The URI of the directory containing the extension.\r\n   */\r\n  public static render(extensionUri: Uri): MainPanel {\r\n    if (MainPanel.currentPanel) {\r\n      // If the webview panel already exists reveal it\r\n      MainPanel.currentPanel._panel.reveal(ViewColumn.One);\r\n    } else {\r\n      // If a webview panel does not already exist create and show a new one\r\n      const panel = window.createWebviewPanel(\r\n        // Panel view type\r\n        \"mainPanel\",\r\n        // Panel title\r\n        \"Arduino Import Module\",\r\n        // The editor column the panel should be displayed in\r\n        ViewColumn.One,\r\n        // Extra panel configurations\r\n        {\r\n          // Enable JavaScript in the webview\r\n          enableScripts: true,\r\n          // Restrict the webview to only load resources from the `out` directory\r\n          //localResourceRoots: [Uri.joinPath(extensionUri, \"out\")],\r\n          enableCommandUris: true,\r\n        }\r\n      );\r\n\r\n      MainPanel.currentPanel = new MainPanel(panel, extensionUri);\r\n    }\r\n\r\n    return MainPanel.currentPanel;\r\n  }\r\n\r\n  /**\r\n   * Cleans up and disposes of webview resources when the webview panel is closed.\r\n   */\r\n  public dispose() {\r\n    MainPanel.currentPanel = undefined;\r\n\r\n    // Dispose of the current webview panel\r\n    this._panel.dispose();\r\n\r\n    // Dispose of all disposables (i.e. commands) associated with the current webview panel\r\n    while (this._disposables.length) {\r\n      const disposable = this._disposables.pop();\r\n      if (disposable) {\r\n        disposable.dispose();\r\n      }\r\n    }\r\n  }\r\n\r\n  private refresh() {\r\n    this._panel.webview.html = this._getWebviewContent(this._panel.webview);\r\n  }\r\n\r\n  /**\r\n   * Defines and returns the HTML that should be rendered within the webview panel.\r\n   *\r\n   * @remarks This is also the place where *references* to CSS and JavaScript files\r\n   * are created and inserted into the webview HTML.\r\n   *\r\n   * @param webview A reference to the extension webview\r\n   * @param extensionUri The URI of the directory containing the extension\r\n   * @returns A template string literal containing the HTML that should be\r\n   * rendered within the webview panel\r\n   */\r\n  private _getWebviewContent(webview: Webview) {\r\n    const webviewUri = getUri(webview, this.extensionUri, [\"out\", \"webview.js\"]);\r\n    const stylesUri = getUri(webview, this.extensionUri, [\"out\", \"styles.css\"]);\r\n    const nonce = getNonce();\r\n    const fileContent = this.getFileContent();\r\n    const dirContent = this.getDirContent();\r\n    const boardContent = this.getBoardContent();\r\n    const boardOptionsContent = this.getBoardOptionsContent();\r\n    const importContent = this.getImportContent();\r\n\r\n    // Tip: Install the es6-string-html VS Code extension to enable code highlighting below\r\n    //test\r\n    return /*html*/ `\r\n      <!DOCTYPE html>\r\n      <html lang=\"en\">\r\n        <head>\r\n          <meta charset=\"UTF-8\">\r\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n\t\t\t\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${webview.cspSource}; script-src 'nonce-${nonce}';\">\r\n          <title>Arduino Import Module</title>\r\n        </head>\r\n        <body>\r\n          <h1>Arduino Import Module</h1>\r\n          <section class=\"component-row\">\r\n            <vscode-button id=\"sketchFile\">Select Arduino Sketch</vscode-button>\r\n            ${fileContent}   \r\n          </section>\r\n          <br>\r\n          <section>\r\n            <vscode-button id=\"destDir\">Select Destination Directory</vscode-button>\r\n            ${dirContent}\r\n          </section>\r\n          <p>Select Arduino Board</p> \r\n          <vscode-dropdown id=\"board\">\r\n            ${boardContent}\r\n          </vscode-dropdown>\r\n          <br>\r\n          <br>\r\n          ${boardOptionsContent}\r\n          <br>\r\n          ${importContent}\r\n\t\t\t\t\t<script type=\"module\" nonce=\"${nonce}\" src=\"${webviewUri}\"></script>\r\n        </body>\r\n      </html>\r\n    `;\r\n  }\r\n\r\n  private getFileContent(){\t\r\n    let result = '';\t\r\n    if (this.sketchFile.length > 0) {\t\r\n      result = `<p>Selected sketch file: ${this.sketchFile} </p>`;\t\r\n    }\t\r\n    return result;\t\r\n  }\t\r\n\r\n  private getDirContent(){\t\r\n    let result = '';\t\r\n    if (this.destinationDirectory.length > 0) {\t\r\n      result = `<p>Selected directory: ${this.destinationDirectory} </p>`;\t\r\n    }\t\r\n    return result;\t\r\n  }\r\n\r\n  private getBoardContent(){\r\n    let result = `<vscode-option value=\"${this.selectedBoard}\">${this.selectedBoard}</vscode-option>`;\r\n    for (const board of boardsInfo.getAllBoards()) {\r\n      if (board !== this.selectedBoard){\r\n        result = result + `<vscode-option value=\"${board}\">${board}</vscode-option>`;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private getBoardOptionsContent(){\r\n    let result = '';\r\n    if (this.selectedBoard.length > 0) {\r\n      this.board = boardsInfo.getBoard(this.selectedBoard);\r\n\r\n      if (this.board.options.length > 0 ) {\r\n        result = `<vscode-radio-group id=\"boardOpt\" orientation=\"vertical\"><label slot=\"label\">Select Board Option</label>`;\r\n        for (const opt of this.board.options) {\r\n          result = result + `<vscode-radio value=\"${opt}\">${opt}</vscode-radio>`;\r\n        }\r\n        result = result + `</vscode-radio-group>`;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private getImportContent(){\r\n    if (this.readyForImport) {\r\n      return '<vscode-button id=\"import\">Import</vscode-button>';\r\n    }\r\n    return '<vscode-button disabled id=\"import\">Import</vscode-button>';  \r\n  }\r\n\r\n  /**\r\n   * Sets up an event listener to listen for messages passed from the webview context and\r\n   * executes code based on the message that is recieved.\r\n   *\r\n   * @param webview A reference to the extension webview\r\n   */\r\n  private _setWebviewMessageListener(webview: Webview) {\r\n    webview.onDidReceiveMessage(\r\n      async (message: any) => {\r\n        const command = message.command;\r\n        const text = message.text;\r\n\r\n        switch (command) {\r\n          case \"board\":\r\n            this.selectedBoard = text;\r\n            this.allSelectionsMade();\r\n            this.refresh();\r\n            return;\r\n          case \"boardOpt\":\r\n            this.selectedOption = text;\r\n            return;\r\n          case \"directory\":\r\n            const destDir = await window.showOpenDialog({\r\n              canSelectFiles: false,\r\n              canSelectFolders: true,\r\n              canSelectMany: false,\r\n              openLabel: 'Select Destination Directory',\r\n            });\r\n            \r\n            if (destDir && destDir[0]) {\r\n              this.destinationDirectory = destDir[0].fsPath;\r\n              webview.postMessage({\r\n                command: \"dirPath\",\r\n                message: this.destinationDirectory,\r\n              });\r\n              this.allSelectionsMade();\r\n              this.refresh();\r\n            }\r\n            return;\r\n          case \"sketch\":\r\n            const sketchFile = await window.showOpenDialog({\r\n              canSelectFiles: true,\r\n              canSelectFolders: false,\r\n              canSelectMany: false,\r\n              filters: {\r\n                  'arduinoSketch': ['ino']\r\n              },\r\n              openLabel: 'Select Arduino Sketch File',\r\n            });\r\n        \r\n            if (sketchFile && sketchFile[0]) {\r\n              this.sketchFile = sketchFile[0].fsPath;\r\n              webview.postMessage({\r\n                command: \"sketchPath\",\r\n                message: this.sketchFile,\r\n              });\r\n              this.allSelectionsMade();\r\n              this.refresh();\r\n            }\r\n            return;\r\n          case \"import\":\r\n            ex.startImport(this.sketchFile, this.destinationDirectory, this.board);\r\n        }\r\n      },\r\n      undefined,\r\n      this._disposables\r\n    );\r\n  }\r\n\r\n  private allSelectionsMade() {\r\n    if(this.board === undefined) {\r\n      if(this.selectedBoard === undefined) {\r\n        console.log(\"Undefined Selection\");\r\n      }\r\n      this.board = new Board(this.selectedBoard);\r\n    }\r\n\r\n    if (this.sketchFile.length > 0 && this.destinationDirectory.length > 0 && this.selectedBoard.length > 0) {\r\n      if (this.board.options.length > 0 && this.selectedOption.length > 0) {\r\n        this.readyForImport = true;\r\n      } else if (this.board.options.length === 0) {\r\n        this.readyForImport = true;\r\n      }\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n  public getBoard() {\r\n    return this.board;\r\n  }\r\n}\r\n", "import { Uri, Webview } from \"vscode\";\r\n\r\n/**\r\n * Code obtained from\r\n * https://github.com/microsoft/vscode-webview-ui-toolkit-samples/blob/main/default/hello-world/src/utilities/getUri.ts\r\n * on 10/21/2023\r\n * \r\n * A helper function which will get the webview URI of a given file or resource.\r\n *\r\n * @remarks This URI can be used within a webview's HTML as a link to the\r\n * given file/resource.\r\n *\r\n * @param webview A reference to the extension webview\r\n * @param extensionUri The URI of the directory containing the extension\r\n * @param pathList An array of strings representing the path to a file/resource\r\n * @returns A URI pointing to the file/resource\r\n */\r\nexport function getUri(webview: Webview, extensionUri: Uri, pathList: string[]) {\r\n  return webview.asWebviewUri(Uri.joinPath(extensionUri, ...pathList));\r\n}\r\n", "/**\r\n * Code obtained from \r\n * https://github.com/microsoft/vscode-webview-ui-toolkit-samples/blob/main/default/hello-world/src/utilities/getNonce.ts\r\n * on 10/21/2023\r\n * \r\n * A helper function that returns a unique alphanumeric identifier called a nonce.\r\n *\r\n * @remarks This function is primarily used to help enforce content security\r\n * policies for resources/scripts being executed in a webview context.\r\n *\r\n * @returns A nonce\r\n */\r\nexport function getNonce() {\r\n  let text = \"\";\r\n  const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n  for (let i = 0; i < 32; i++) {\r\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n  }\r\n  return text;\r\n}\r\n", "import * as vscode from 'vscode';\r\nimport * as parser from './parser';\r\nimport * as path from 'path';\r\n\r\n\r\nexport const UNO = \"UNO\"; //none \r\nexport const NANO = \"Nano\"; //ATmega328P or ATmega328P (Old Bootloader) \r\nexport const MEGA = \"Mega or Mega2560\"; //ATMega2560; ATMega1280 \r\nexport const PRO = \"Pro or Pro Mini\"; //ATmega328P (5V, 16 MHz); ATmega328P (3.3V, 8 MHz) \r\n\r\nexport function getAllBoards(): string[] {\r\n    const result = [UNO, NANO, MEGA, PRO];\r\n    return result;\r\n}\r\n\r\nexport function getBoard(boardName: string): Board {\r\n    return new Board(boardName);\r\n}\r\n\r\n/**\r\n * Board class that stores hardcoded data for each board\r\n */\r\nexport class Board {\r\n    boardName: string;\r\n    private hardCodedFlags: string = \"\";\r\n    private chipName: string = \"\";\r\n    allFlags: string = \"\";\r\n    options: string[] = [];\r\n    private pathToCore: string = \"\";\r\n\r\n\r\n    constructor(boardName: string) {\r\n        this.boardName = boardName;\r\n\r\n        if(boardName === NANO) {\r\n            this.hardCodedFlags = \"-DARDUINO_ARCH_MEGAAVR -DARDUINO=10607 -Wall -Wextra -DF_CPU=24000000L\";\r\n            this.chipName = \"avrdd\";\r\n            this.options.push(\"ATmega328P or ATmega328P (Old Bootloader)\");\r\n            \r\n            const localAppData = process.env.LOCALAPPDATA;\r\n            const version = parser.getDXCoreVersion();\r\n                if (localAppData) {\r\n                this.pathToCore = path.join(localAppData, \"Arduino15\", \"packages\", \"DxCore\",\"hardware\",\"megaavr\",version,\"cores\",\"dxcore\");\r\n                }\r\n        } else if (boardName === MEGA) {\r\n            this.options.push(\"ATMega2560\");\r\n            this.options.push(\"ATMega1280\");\r\n        } else if (boardName === PRO) {\r\n            this.options.push(\"ATmega328P (5V, 16 MHz)\");\r\n            this.options.push(\"ATmega328P (3.3V, 8 MHz)\");\r\n        }\r\n    }\r\n\r\n    getBoardName() {\r\n        return this.boardName;\r\n    }\r\n\r\n    getHardcodedFlags() {\r\n        return this.hardCodedFlags;\r\n    }\r\n\r\n    getChipName() {\r\n        return this.chipName;\r\n    }\r\n\r\n    setAllFlags(allFlags: string) {\r\n        this.allFlags = allFlags;\r\n    }\r\n\r\n    getAllFlags() {\r\n        return this.allFlags;\r\n    }\r\n\r\n    getPathToCore() {\r\n        return this.pathToCore;\r\n    }\r\n\r\n}\r\n", "import * as vscode from 'vscode';\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\n\r\nexport class Cmaker {\r\n\tpublic projDir: string;\r\n\tpublic projName: string;\r\n\tpublic srcFileName: string;\r\n\tpublic compilerflags: string;\r\n\tpublic linkerflags: string;\r\n\t\r\n\tconstructor(){\r\n\t\tthis.projDir = \"\";\r\n\t\tthis.projName = \"\";\r\n\t\tthis.srcFileName = \"\";\r\n\t\tthis.compilerflags = \"\";\r\n\t\tthis.linkerflags = \"\";\r\n\t}\r\n\tpublic setProjectDirectory(projectDirectory:string){\r\n\t\tthis.projDir = projectDirectory;\r\n\t}\r\n\tpublic setProjectName(projectName:string){\r\n\t\tthis.projName = projectName;\r\n\t}\r\n\tpublic setSourceName(sourceFileName:string){\r\n\t\tthis.srcFileName = sourceFileName;\r\n\t}\r\n\tpublic setCompilerFlags(compileFlag:string){\r\n\t\tthis.compilerflags = compileFlag;\r\n\t}\r\n\tpublic setLinkerFlags(linkerFlags:string){\r\n\t\tthis.linkerflags = linkerFlags;\r\n\t}\r\n\r\n\r\n\tpublic build(): void{\r\n\r\n\t\t//sets the cmake version\r\n\t\tlet cmakeHeader = \"cmake_minimum_required(VERSION 3.0)\";\r\n\t\tcmakeHeader = cmakeHeader + '\\nset(CMAKE_C_COMPILER \"${CMAKE_CURRENT_SOURCE_DIR}/core/compiler/bin/avr-gcc\")';\r\n\t\tcmakeHeader = cmakeHeader + '\\nset(CMAKE_CXX_COMPILER \"${CMAKE_CURRENT_SOURCE_DIR}/core/compiler/bin/avr-g++\")';\r\n\t\tcmakeHeader = cmakeHeader + \"\\nproject(\" + this.projName + \")\";\r\n\t\t//cmake  adding executable \r\n\t\tlet cmakeSrcExecutable = \"\\nadd_executable(\" + this.projName + \" \" + this.srcFileName +\")\";\r\n\t\t// cmake adding compile option\r\n\t\tlet cmakeSrcCompileOpt = \"\\ntarget_compile_options(\" + this.projName + \" PRIVATE \" + this.compilerflags +\")\";\r\n\t\t// cmake link libary\r\n\t\tlet cmakeSrcLinkLib = \"\\ntarget_link_libraries(\" + this.projName + \" \" + this.linkerflags +\")\";\r\n\t\t// hex file generator\r\n\t\tlet hex = \"add_custom_command(TARGET \" + this.projName + \" POST_BUILD COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/core/compiler/bin/avr-objcopy -O ihex -R .eeprom \" + this.projName + \" \" + this.projName + \".hex)\\n\";\r\n\t\t// bin file generator\r\n\t\tlet bin = \"add_custom_command(TARGET \" + this.projName + \" POST_BUILD COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/core/compiler/bin/avr-objcopy -O binary -R .eeprom \" + this.projName + \" \" + this.projName + \".bin)\\n\";\r\n\r\n\t\t//resets Cmake File\r\n\t\tif (fs.existsSync(this.projDir + \"/CMakeLists.txt\")) {\r\n\t\t\tfs.unlinkSync(this.projDir + \"/CMakeLists.txt\");\r\n\t\t}\r\n\t\tif (fs.existsSync(this.projDir + \"/Makefile\")) {\r\n\t\t\tfs.unlinkSync(this.projDir + \"/Makefile\");\r\n\t\t}\r\n\t\tif (fs.existsSync(this.projDir + \"/cmake_install.cmake\")) {\r\n\t\t\tfs.unlinkSync(this.projDir + \"/cmake_install.cmake\");\r\n\t\t}\r\n\t\tif (fs.existsSync(this.projDir + \"/CMakeCache.txt\")) {\r\n\t\t\tfs.unlinkSync(this.projDir + \"/CMakeCache.txt\");\r\n\t\t}\r\n\t\tif (fs.existsSync(this.projDir + \"/CMakeFiles\")) {\r\n\t\t\tfs.rmSync(this.projDir + \"/CMakeFiles\", { recursive: true, force: true });\r\n\t\t}\r\n\r\n\t\tfs.writeFileSync(this.projDir + \"/CMakeLists.txt\", cmakeHeader);\r\n\t\tfs.appendFileSync(this.projDir + \"/CMakeLists.txt\", cmakeSrcExecutable);\r\n\t\tfs.appendFileSync(this.projDir + \"/CMakeLists.txt\", cmakeSrcCompileOpt);\r\n\t\tfs.appendFileSync(this.projDir + \"/CMakeLists.txt\", cmakeSrcLinkLib);\r\n\t\tfs.appendFileSync(this.projDir + \"/CMakeLists.txt\", hex);\r\n\t\tfs.appendFileSync(this.projDir + \"/CMakeLists.txt\", bin);\r\n\r\n\t\t// use fs.appendFileSync(projDir + \"/CMakeLists.txt\", data); for future appends\r\n\r\n\t}\r\n}\r\n\r\n\r\n/*\r\n\r\nListing out the order cmake needs to run things in:\r\n\r\n - (other stuff)\r\n Archiver:\r\n - Archive all libraries to the core.a file\r\n Linker:\r\n - create .elf file, linking to core.a (already happens during the linker command)\r\n - create bin\r\n - create eeprom\r\n - create hex (addHexBuilder)\r\n - lst\r\n - map\r\n*/\r\n\r\n\r\nexport default Cmaker;\r\n", "import * as vscode from 'vscode';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\n\r\n/**\r\n * This copies all of the libraries from Arduino to the user's new local project directory (into the \"core\" folder\r\n * This command will also update the library files if they've changed since the last copy.\r\n * @param dest the user's project directory (/core/libraries will be added)\r\n */\r\nexport function librariesCopy(dest: string) {\r\n\t// path info: https://support.arduino.cc/hc/en-us/articles/360018448279-Open-the-Arduino15-folder\r\n\t// 1.5.10 must be changed if there is an update to the package\r\n\tlet srcPath = \"/Arduino15/packages/DxCore/hardware/megaavr/1.5.10/libraries/\";\r\n\tdest = dest + \"/core/libraries\";\r\n\tshellCopy(srcPath, dest);\r\n}\r\n\r\n\r\n/**\r\n * This copies the compiler folder to the project core directory.\r\n * @param dest the user's project directory (/core/libraries will be added)\r\n */\r\nexport function compilerCopy(dest: string) {\r\n\t// 7.3.0-atmel3.6.1-azduino7 must be changed if there is an update to the compiler\r\n\tlet srcPath = \"/Arduino15/packages/DxCore/tools/avr-gcc/7.3.0-atmel3.6.1-azduino7/\";\r\n\tdest = dest + \"/core/compiler\";\r\n\tshellCopy(srcPath, dest);\r\n}\r\n\r\n\r\n/**\r\n * This function invokes a shell to copy an entire directory from within the Arduino15 folder.\r\n * @param from the folder to copy\r\n * @param to the folder to copy to\r\n */\r\nfunction shellCopy(from: string, to: string) {\r\n\tlet runCmd = \"mkdir -p \" + to + \" && cp -r\";\r\n\tif(process.platform === \"win32\") {\r\n\t\trunCmd = \"cd %LocalAppData% && ROBOCOPY /CREATE /E\";\r\n\t\tfrom = \".\" + from;\r\n\t} else if(process.platform === \"darwin\") {\r\n\t\tfrom = \"~/Library\" + from;\r\n\t} else if(process.platform === \"linux\") {\r\n\t\tfrom = \"~\" + from.replace(\"Arduino15\", \".arduino15\");\r\n\t}\r\n\tconst command = runCmd + \" \" + from + \" \" + to;\r\n\tconsole.log(\"copy command being run: \" + command);\r\n\tconst { exec } = require('child_process');\r\n\texec(command, (error: string, stdout: string, stderr: string) => {\r\n\t\tif(error && process.platform !== \"win32\") {\r\n\t\t\t// windows will say the command failed, but it didn't\r\n\t\t\t// so I guess if a Windows user really has an error then they\r\n\t\t\t// can ponder why MS chose to return an error on every command.\r\n\t\t\tvscode.window.showInformationMessage('An error occured trying to copy the library files: ' + error);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconsole.log(\"copy command output: \" + stdout);\r\n\t\tif(stderr) {\r\n\t\t\tconsole.log(\"copy command err: \" + stderr);\r\n\t\t}\r\n\t});\r\n\t\r\n}\r\n\r\n/** Recursively copies a directory to a specified location\r\n * \r\n * @param src The directory to copy\r\n * @param dest The destination location\r\n */\r\nexport function copyDirectory(src: string, dest: string): void {\r\n\t// Create destination directory if it doesn't exist\r\n\tif (!fs.existsSync(dest)) {\r\n\t  fs.mkdirSync(dest);\r\n\t}\r\n  \r\n\t// Read the source directory\r\n\tconst files = fs.readdirSync(src);\r\n  \r\n\t// Copy each file to the destination directory\r\n\tfiles.forEach(file => {\r\n\t  const srcPath = path.join(src, file);\r\n\t  const destPath = path.join(dest, file);\r\n\t  if (fs.lstatSync(srcPath).isDirectory()) {\r\n\t\t// Recursively copy subdirectories\r\n\t\tcopyDirectory(srcPath, destPath);\r\n\t  } else {\r\n\t\t// Copy files\r\n\t\tfs.copyFileSync(srcPath, destPath);\r\n\t  }\r\n\t});\r\n}\r\n\r\n/**\r\n * Copies the most recent version of the AVR-GCC compiler that a user has downloaded\r\n * \r\n * @param dest Destination directory where the AVR-GCC compiler should be copied to\r\n */\r\nexport function copyAvrGcc(dest: string){\r\n\tconst localAppData = process.env.LOCALAPPDATA;\r\n\tif (localAppData) {\r\n\t\tconst compilerPath = path.join(localAppData,\"Arduino15\",\"packages\",\"arduino\",\"tools\",\"avr-gcc\");\r\n\t\tconst version = mostRecentDirectory(compilerPath);\r\n\t\tconst finalCompilerPath = path.join(compilerPath, version);\r\n\t\tdest = path.join(dest, \"compiler\");\r\n\t\tcopyDirectory(finalCompilerPath, dest);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Helper function to determine which directory inside a given directory is the most recent\r\n * based on the modified stamp\r\n * @param dirPath Path to the directory that should be investigated\r\n * @returns The name of the directory inside dirPath that was most recently updated\r\n */\r\nfunction mostRecentDirectory(dirPath: string): string {\r\n\r\n   \tconst directories = fs.readdirSync(dirPath, { withFileTypes: true });\r\n    const subdirectories = directories.filter((dirent) => dirent.isDirectory());\r\n    const mostRecentDirectory = subdirectories.reduce((prev, current) => {\r\n    \tconst prevPath = `${path}/${prev.name}`;\r\n    \tconst currentPath = `${path}/${current.name}`;\r\n\r\n    \tconst prevStat = fs.statSync(prevPath);\r\n    \tconst currentStat = fs.statSync(currentPath);\r\n\r\n    \treturn prevStat.mtimeMs > currentStat.mtimeMs ? prev : current;\r\n    });\r\n    return mostRecentDirectory.name;\r\n\r\n}\r\n\r\n"],
  "mappings": "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",
  "names": ["vscode", "path", "readline", "fs", "line", "str", "import_vscode", "path", "fs", "vscode", "fs", "path", "mostRecentDirectory", "path"]
}
